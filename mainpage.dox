/**
\mainpage ROS support package

\section intro_sec Introduction
The ROS support package from Commonplace Robotics GmbH provides integration for CPR Mover and igus Robolink robots into the ROS ecosystem. It features:
<UL>
<LI>Classes that can be used to control robots using ROS topics.</LI>
<LI>URDF robot definition files, that can for example be used to visualize the state of
CPR robots in RViz or similar tools.</LI>
<LI>A simple RViz plugin allowing to control CPR robots from within RViz.</LI>
<LI>Running example targetting the igus robolink 4DOF, small version.</LI>
<LI>Running example targetting the CPR Mover6.</LI>
</UL>

\section getstarted Getting started

\subsection requirements System Requirements
<UL>
<LI>The package has been developed and tested on Ubuntu 18.04 with ROS melodic using the GNU 8.3 C++ toolchain.</LI>
<LI>A C++17 capable compiler will be required in any case.</LI>
<LI>In order to physically connect robots you will need a USB to CAN adapter, testing was done with an <A HREF="https://www.peak-system.com/PCAN-USB.199.0.html">adapter from PEAK System</A>.</LI>
<LI>We recommend setting your system locale to EN-US because
some ROS components seem to have trouble parsing floating point numbers in XML files, if commas are used instead of points to separate the fractional part of floating point numbers by the system locale.</LI>
<LI>We recommend having a good C++ editor of your
choice at hands, the command line examples on this page will assume <A HREF="https://code.visualstudio.com/">Microsoft Visual Studio Code</A> is installed on your machine - it is what has been used during developement of the package in conjunction with the following plugins:
<UL>
<LI><A HREF="https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools">C/C++ IntelliSense, debugging, and code browsing</A></LI>
<LI><A HREF="https://marketplace.visualstudio.com/items?itemName=twxs.cmake">CMake langage support</A></LI>
<LI><A HREF="https://marketplace.visualstudio.com/items?itemName=vector-of-bool.cmake-tools">Extended CMake support</A></LI>
<LI><A HREF="https://marketplace.visualstudio.com/items?itemName=ajshort.ros">Development support for Robot Operating System</A></LI>
</UL>
</LI>
</UL>

\subsection install Installation

\subsubsection step1 1. Prerequisites
<UL>
<LI>Make sure to have ROS melodic (or later) properly installed and configured on your machine. The <A HREF="http://wiki.ros.org/melodic/Installation/Ubuntu">instructions</A> provided from the <A HREF="http://wiki.ros.org">ROS wiki</A> might be helpful doing so.</LI>
<LI>The package is designed to be built using <A HREF="http://wiki.ros.org/catkin/commands/catkin_make">catkin_make</A>. You will need a properly configured <A HREF="http://wiki.ros.org/catkin/workspaces">catkin workspace</A>. This <A HREF="http://wiki.ros.org/ROS/Tutorials/InstallingandConfiguringROSEnvironment">tutorial</A> may be helpful setting it up.</LI>
</UL>

\subsubsection step2 2. Clone and build the repository
The source code for the package can be downloaded from our <A HREF="https://github.com/CPR-Robots/cpr_robot">github repository</A>.
<OL>
<LI>
Clone the package sources by typing the following commands into a terminal from within the root folder of your catkin workspace:
\code{.sh}
  cd src
  git clone https://github.com/CPR-Robots/cpr_robot 
  cd ..
\endcode
</LI>
<LI>
It may be advisable to reconfigure the CMake cache and clean the build folder. To do so, from within the root folder of your catkin workspace, type the following into a terminal:
\code{.sh}
catkin_make clean
catkin_make rebuild_cache
\endcode
</LI>
<LI>
Now it is time to actually build the package. From within the root folder of your catkin workspace type the following into a terminal:
\code{.sh}
catkin_make
\endcode
</LI>
<LI>
Finally let's install the package. From within the root folder of your catkin workspace type the following into a terminal:
\code{.sh}
catkin_make install
\endcode
</LI>
</OL>

\subsubsection step3 3. Run the examples
<OL>
<LI>
Make sure the robot ist connected to your computer via your CAN to USB adapter and powered on.
</LI>
<LI>
The CAN interface on your computer needs to be started, whenever the CAN to USB adapter has been plugged in or the computer has started up. To do so, type
the following into a terminal:
\code{.sh}
sudo modprobe can_dev
sudo modprobe can
sudo modprobe can_raw
sudo ip link set can0 type can bitrate 500000
sudo ifconfig can0 up
\endcode
It may be advisable to have a small shellscript with these commands, typing them again each time the adapter hase been plugged in may be cumbersome after a while.
</LI>
<LI>
Run the RViz plugin with one of the example robot nodes. 
<UL>
<LI>To control an igus robolink 4DOF, small version robot type the following into a terminal:
\code{.sh}
roslaunch cpr_robot igus_4DOF_SV.launch
\endcode</LI>
<LI>If you want to control a CPR Mover6 robot, type the following into a terminal:
\code{.sh}
roslaunch cpr_robot CPRMover6.launch
\endcode
</LI>
</UL>
</LI>
</OL>

\subsubsection step4 4. Take a look at the source code
<OL>
<LI>
Go to the package source folder:
\code{.sh}
roscd cpr_robot
\endcode
</LI>
<LI>
Open the folder using an editor (in this example Visual Studio Code is used):
\code{.sh}
code .
\endcode
</LI>
<LI>
Have fun playing around with it.
</LI>
</OL>

\section ovrview Overview

\subsection rbotnode The Robot node

See the files main_CPRMover6.cpp or main_igus_4DOF_SV.cpp in order to have a working example on how to set up a ROS node that will allow to integrate robots from igus or CPR into ROS. The general way to do it, is
to instantiate a class that has been derived from the abstract Robot base class, then within a standard ROS spinning loop subsequently call the Read, PublishState and Write methods:

\code{.cpp}
  cpr_robot::CPRMover6 robot;
  robot.Init();
  ros::Rate loop_rate(10);
  while (ros::ok())
  {
    robot.Read();
    robot.PublishState();
    robot.Write();
    ros::spinOnce();
    loop_rate.sleep();
  }
\endcode

\subsection rvizplug The RViz plugin

The complete source code for the RViz plugin is contained in the files RobotPanel.cpp and JointControl.cpp and their respective headers. You can use these a a starting point for the developement of your own plugin. Note that you will have to run
\code{.sh}
catkin_make install
\endcode
for Panels (and other RViz plugins) to become accesible from within RViz.

\subsection diag Dataflow schema

\image html Diagram.png

*/
